//
//  UIViewController+Rx.swift
//  RIBs
//
//  Created by Dmitriy Ignatyev on 02.05.2025.
//

public import struct RxCocoa.ControlEvent
public import class UIKit.UIViewController
import RxSwift
import UIKit

public protocol ViewControllerLifeCycleObservable: AnyObject {
  var viewDidLoadEvent: ControlEvent<Void> { get }
  var viewWillAppearEvent: ControlEvent<Void> { get }
  var viewDidAppearEvent: ControlEvent<Void> { get }
  var viewWillDisappearEvent: ControlEvent<Void> { get }
  var viewDidDisappearEvent: ControlEvent<Void> { get }
}

extension ViewControllerLifeCycleObservable where Self: UIViewController {
  /// –ü—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ ViewController –≤–∏–¥–µ–Ω. –í –æ—Å–Ω–æ–≤–µ –ª–µ–∂–∞—Ç —Å–æ–±—ã—Ç–∏—è viewWillAppear –∏ viewWillDisappear
  public var isVisibleBasedOnWillEvents: ControlEvent<Bool> {
    var connectDisposable: (any Disposable)?

    let source = Observable.merge(viewWillAppearEvent.map { true }, viewWillDisappearEvent.map { false })
      .startWith(false)
      .distinctUntilChanged()
      .do(onDispose: {
        connectDisposable?.dispose()
      })
      .replay(1)
    // .share(replay: 1, scope: .forever) // Do not work
    // üìù @iDmitriyy
    // iDmitriyy_TODO: - –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å HotObservable –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å.
    // –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏ –º–µ—Å—Ç–∞–º–∏.

    connectDisposable = source.connect()

    return ControlEvent(events: source)
  }
}

/// –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ViewController'a –∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
/// –ö–æ–Ω—Ñ–æ—Ä–º–∏–º UIViewController'—É –ø—Ä–æ—Ç–æ–∫–æ–ª ViewControllerLifeCycle –∏ —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.
/// –ù–∞—Å–ª–µ–¥–Ω–∏–∫–∏ UIViewController –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—é–±—É—é –ø—Ä–æ–ø–µ—Ä—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
///
/// –ó–∞ –æ—Å–Ω–æ–≤—É –±—ã–ª–æ –≤–∑—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ:
/// https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Traits.md#controlproperty--controlevent
extension Reactive where Base: UIViewController {
  fileprivate var viewDidLoad: ControlEvent<Void> {
    let source = methodInvoked(#selector(Base.viewDidLoad)).map { _ in }
    return ControlEvent(events: source)
  }

  fileprivate var viewWillAppear: ControlEvent<Void> {
    let source = methodInvoked(#selector(Base.viewWillAppear)).map { _ in Void() }
    return ControlEvent(events: source)
  }

  fileprivate var viewDidAppear: ControlEvent<Void> {
    let source = methodInvoked(#selector(Base.viewDidAppear)).map { _ in Void() }
    return ControlEvent(events: source)
  }

  fileprivate var viewWillDisappear: ControlEvent<Void> {
    let source = methodInvoked(#selector(Base.viewWillDisappear)).map { _ in Void() }
    return ControlEvent(events: source)
  }

  fileprivate var viewDidDisappear: ControlEvent<Void> {
    let source = methodInvoked(#selector(Base.viewDidDisappear)).map { _ in Void() }
    return ControlEvent(events: source)
  }
}

// TODO: - .
//extension UIViewController: ViewControllerLifeCycleObservable {
//  public var viewDidLoadEvent: ControlEvent<Void> { rx.viewDidLoad }
//  public var viewWillAppearEvent: ControlEvent<Void> { rx.viewWillAppear }
//  public var viewDidAppearEvent: ControlEvent<Void> { rx.viewDidAppear }
//  public var viewWillDisappearEvent: ControlEvent<Void> { rx.viewWillDisappear }
//  public var viewDidDisappearEvent: ControlEvent<Void> { rx.viewDidDisappear }
//}
